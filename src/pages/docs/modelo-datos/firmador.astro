---
import DocsLayout from "../../../layouts/Layout.astro";
import CodeBlock from "../../../components/CodeBlock.astro";

const interfaz = `interface SignXmlCommand {
  p12Buffer: Uint8Array;   // Certificado digital .p12 en binario
  password: string;        // Contraseña del certificado
  xmlBuffer: Uint8Array;   // Comprobante XML a firmar
}`;
---

<DocsLayout title="Modelo de datos del firmado ">
  <section class="mb-12 text-center max-w-2xl mx-auto">
    <h1 class="text-3xl font-bold text-white mb-3">
      Modelo de datos del firmado
    </h1>
    <p class="text-zinc-400 text-base">
      Aprende cómo estructurar los datos necesarios para firmar un comprobante
      XML de forma válida y segura con un certificado digital.
    </p>
  </section>

  <section class="mb-24">
    <div
      class="bg-zinc-900 border border-zinc-800 p-6 sm:p-8 rounded-2xl max-w-3xl mx-auto shadow-md"
    >
      <div class="text-sm text-zinc-400 bg-zinc-800/40 p-6 rounded-xl">
        <h3 class="text-base font-semibold text-white mb-4">
          Modelo del firmador
        </h3>
        <CodeBlock code={interfaz} language="ts" filename="SignXmlCommand.ts" />

        <ul class="list-disc list-inside text-sm pl-4 space-y-2 mt-6">
          <li>
            <code>p12Buffer</code>: Certificado en formato `.p12` como <code
              >Uint8Array</code
            >
          </li>
          <li>
            <code>password</code>: Contraseña que protege el certificado
          </li>
          <li>
            <code>xmlBuffer</code>: XML del comprobante sin firmar en binario
          </li>
        </ul>

        <p class="mt-4 text-sm text-zinc-400">
          Asegúrate de que el comprobante esté bien formado y cumpla con los
          requisitos del SRI antes de firmarlo.
        </p>

        <hr class="my-8 border-zinc-700" />

        <h3 class="text-base font-semibold text-white mb-3">
          Respuesta esperada
        </h3>
        <p class="text-sm text-zinc-400 mb-4">
          La función <code>signXml(cmd: SignXmlCommand)</code> retorna una promesa
          con el XML firmado como <code>string</code>.
        </p>

        <CodeBlock
          language="ts"
          filename="Resultado"
          code={`const signedXml: string = await signXml(cmd);`}
        />
      </div>
    </div>
  </section>
</DocsLayout>
